using System;
using System.Configuration;
using System.Web;
using System.Web.Mvc;
using Na.Core;
using Na.Core.Domain.Users;
using Na.Core.Helpers;
using Na.Services.Authentication;
using Na.Services.Users;
using Na.Website.Framework;
using Na.Website.Models;
using Na.Website.Models.Common;
using Na.Website.Areas.Search.Models;
using Na.Website.Framework.Search;
using Na.Services.Search;
using System.Collections.Generic;
using System.Web.Script.Serialization;
using Na.Core.Model.UserLogin;
using System.IO;
using System.Web.Security;
using Elmah;// Added By Rakesh Kumar-II

namespace Na.Website.Controllers
{
    //////[ValidateAntiForgeryTokenWrapper(HttpVerbs.Post)]
    [HandleException]
    public class LoginController : BaseController
    {
        #region Fields
        private readonly IWorkContext _workContext;
        private readonly IAuthenticationService _authenticationService;
        private readonly IUserService _userService;
        private readonly IUserAccountService _userAccountService;
        private readonly UserSettings _userSettings;
        //private readonly ICountryService _countryService;        
        private readonly IAutoGeneratedEmailTypesService _emailTypes;
        private readonly IWebSiteRoleService _webRoles;
        private readonly IRecentSavedSearchService _savedSearchService;
        private readonly ILoginService _loginService;

        /////private readonly CaptchaSettings _captchaSettings;
        /////private readonly ExternalAuthenticationSettings _externalAuthenticationSettings;
        private readonly IContextDataHandler _common;
        private bool lbloginIfValidateFromCookie = true;
        Na.Core.Configuration.NAConfiguration _config = new Na.Core.Configuration.NAConfiguration();
        #endregion

        #region Ctor
        public LoginController(IWorkContext workContext, IAuthenticationService authenticationService, IUserService userService, IUserAccountService userAccountService,
        UserSettings userSettings, IAutoGeneratedEmailTypesService emailTypes,
            IWebSiteRoleService webRoles,
            IContextDataHandler common,
            IRecentSavedSearchService savedSearchService,
            ILoginService loginService)
        {
            this._workContext = workContext;
            this._authenticationService = authenticationService;
            this._userService = userService;
            this._userAccountService = userAccountService;
            this._userSettings = userSettings;
            this._emailTypes = emailTypes;
            this._webRoles = webRoles;
            this._common = common;
            this._savedSearchService = savedSearchService;
            this._loginService = loginService;
        }
        #endregion

        enum LoginOrReset { Login = 0, Reset = 1 }; // Added By Rakesh Kumar on 21 June 2013
        #region ActionResult
        //
        // GET: /Login/
        public ActionResult Index()
        {
            var model = new LoginModel();
            model.forgotMessage = string.Empty;
            model.loginMessage = string.Empty;
            model.ReturnUrl = string.Empty;
            if (!string.IsNullOrWhiteSpace(Request.QueryString["ReturnUrl"])) { model.ReturnUrl = Request.QueryString["ReturnUrl"]; }
            if (string.IsNullOrWhiteSpace(model.ReturnUrl)) { if (!string.IsNullOrWhiteSpace(_common.GetStringValue(Request.UrlReferrer, ""))) { model.ReturnUrl = _common.GetStringValue(Request.UrlReferrer, ""); } }
            //************************   Added By Rakesh on 15 July 2013 to Implement the Remember Me Functionality    *********
            var CheckASPXAUTHCookie = GetCookieValue(FormsAuthentication.FormsCookieName);
            if (CheckASPXAUTHCookie != "")
            {
                var LoginCredentials = FormsAuthentication.Decrypt(CheckASPXAUTHCookie);  // By Rakesh-II 
                GetCookeValuesForNextLogin(LoginCredentials.UserData, model); // update credentials in Model
                var LastReturnPath = "";
                /* if last return path is null then  get the value from  model.ReturnUrl as returned from some 
                 * other page & afer validatin we need to show that respective page  eg : my account Controller page*/
                if (!string.IsNullOrWhiteSpace(Request.QueryString["RequestURL"]))
                {
                    LastReturnPath = Request.QueryString["RequestURL"];
                    model.ReturnUrl = LastReturnPath;
                }
                else
                {
                    LastReturnPath = model.ReturnUrl;//Na.Core.Configuration.NaConfig.Url.DomainUrl + "/" + model.ReturnUrl; 
                }
                // added by Rachna/S on 6 feb 2014 to reduce the time taken on Login hit
                SharedInfo _sharedInfo = new SharedInfo();
                int iUserID = _sharedInfo.LoggedInUserInfo.User.UserId;
                if (iUserID <= 0)
                {
                    Reset(model, model.ReturnUrl); // this has to be run only when no user is loggined and try to hit login action 
                }
                // Below is returend true user validated Successfully , if not then check existance of cookie and set(lbloginIfValidateFromCookie) this to false 
                if (lbloginIfValidateFromCookie == true)
                {
                    /*
                     * If referrer or last returnurl  contains  login in  then we need to redirect it to the myaccount page
                     * By Vishant Garg 29-08-2013SSSS
                     */
                    if (!String.IsNullOrEmpty(LastReturnPath) && !LastReturnPath.ToLower().Contains("login"))
                        return Redirect(LastReturnPath);
                    else
                        return Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/myaccount");
                    //if (!string.IsNullOrEmpty(LastReturnPath))
                    //    return Redirect(LastReturnPath);
                }

            }
            //  *************************  End of Changes    **************************

            return View(model);
        }

        [HttpParamAction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Login(LoginModel model, string ReturnUrl)
        {
            Na.Core.SharedInfo _sharedInfo = new Na.Core.SharedInfo();
            ModelState.Remove("EmailAddess");// Added By Rakesh: purpose: on login button click validatin for forgot password email also arises : done on 02 August 2013.  
            if (ValidateLogOn(model))
            {
              //  if (!String.IsNullOrWhiteSpace(ReturnUrl) && !ReturnUrl.ToLower().Contains("http://" + Request.Url.Host.ToLower())) { ReturnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + "/" + ReturnUrl.Replace("//", "/"); }
                // Done by Rachna/S on 27 jan 14 w.r.t to #348
                if (!String.IsNullOrWhiteSpace(ReturnUrl) && !ReturnUrl.ToLower().Contains("http://" + Request.Url.Host.ToLower()))
                {
                    
                    if (ReturnUrl.StartsWith("/"))
                    {
                        ReturnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + ReturnUrl;
                    }
                    else
                    {
                        ReturnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + "/" + ReturnUrl;
                    }
                }
                string returnUrl = (ReturnUrl != null) ? ReturnUrl : model.ReturnUrl;

                var user = new User();
                var userAccount = new UserAccountInformation();
                int status = (int)LoginOrReset.Login;// Added By Rakesh kumar get the value from Enum 
                bool lblogin = fcnLogin(model, ref user, ref userAccount, status);

                if (lblogin)
                {
                    //sign in new user
                    user = _sharedInfo.ConvertUserModelToUser(_sharedInfo.LoggedInUserInfo.User);
                    _authenticationService.SignIn(user, model.RememberMe);

                    #region Redirect After Login by Chandi@20130124
                    string PageLists = _common.GetStringValue(_config.GetStringValueFromConfig("RedirectControllAfterLogin", string.Empty), string.Empty);
                    if (isRedirectControllPageAfterLogin(PageLists, returnUrl.Replace(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/", "")))
                    {
                        var _url = fcnRedirectedPage();
                        if (!String.IsNullOrWhiteSpace(_url)) { returnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + "/" + _url; }
                        else { returnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + "/browse"; }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(returnUrl) && !returnUrl.ToLower().Contains("login"))
                        return Redirect(returnUrl);
                    else
                        return Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/myaccount");
                }
                else
                {
                    if (!model.isConcurrent)
                    {
                        model.loginMessage = string.Empty;
                        model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-success\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                            "The username and/or password you have provided cannot be found in our records.</div></div>";
                    }
                }
            }
            return View(model);
        }

        [HttpParamAction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Reset(LoginModel model, string ReturnUrl)
        {
            if (ValidateResetLogOn(model))
            {
               // if (!String.IsNullOrWhiteSpace(ReturnUrl) && !ReturnUrl.ToLower().Contains("http://" + Request.Url.Host.ToLower())) { ReturnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + "/" + ReturnUrl.Replace("//", "/"); }
                //Done by Rachna/S on 27 jan 14 w.r.t to #348
                if (!String.IsNullOrWhiteSpace(ReturnUrl) && !ReturnUrl.ToLower().Contains("http://" + Request.Url.Host.ToLower()))
                {
                    if (ReturnUrl.StartsWith("/"))
                    {
                        ReturnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + ReturnUrl;
                    }
                    else
                    {
                        ReturnUrl = Na.Core.Configuration.NaConfig.Url.DomainUrl + "/" + ReturnUrl;
                    }
                }
                string returnUrl = (ReturnUrl != null) ? ReturnUrl : model.ReturnUrl;

                var user = new User();
                var userAccount = new UserAccountInformation();
                //  bool lblogin = fcnLoginReset(model, ref user, ref userAccount);
                int status = (int)LoginOrReset.Reset;
                bool lblogin = fcnLogin(model, ref user, ref userAccount, status);// using same function for Login & Reset, last parameter distinguish it. 

                if (lblogin)
                {
                    //sign in new user
                    _authenticationService.SignIn(user, model.RememberMe);
                    if (!String.IsNullOrEmpty(returnUrl) && !returnUrl.ToLower().Contains("login"))
                        return Redirect(returnUrl);
                    else
                        return Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/myaccount");
                }
                else
                {
                    if (!model.isConcurrent)
                    {
                        model.loginMessage = string.Empty;
                        model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-success\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                            "The username and/or password you have provided cannot be found in our records.</div></div>";
                    }
                    //***************  Start .. this block is add by Rakesh to implement remember Me  19 July 2013 ******************
                    // Check if cookie exists & authenticatin is failed then clear the cookie as passsword may be changed.
                    var CheckASPXAUTHCookie = GetCookieValue(FormsAuthentication.FormsCookieName);
                    if (CheckASPXAUTHCookie != "")
                    {
                        _authenticationService.SignOut(); // newly aded By Rakesh  on 19 July 2013
                        lbloginIfValidateFromCookie = false;
                        // In case of false return redirect to Login again(i.e authenticatin from cokiee is not successful ) BY Rakesh 19 July 2013 
                        //return Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/login");
                    }
                    //************************************************  End  ******************

                }
            }
            return View(model);
        }

        [HttpParamAction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ForgotPassword(LoginModel model)
        {
            // Added By Rakesh: purpose: on forgot button click validatin for login username/password  also arises : done on 02 August 2013.  
            ModelState.Remove("Username");
            ModelState.Remove("Password");
            if (ValidateForgotPassword(model))
            {
                bool retval = fcnGetPassword(model);
                if (!retval)
                {
                    model.forgotMessage = string.Empty;
                    model.forgotMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                                           "The e-mail address you have provided cannot be found in our records.</div></div>";
                }
                else
                {
                    model.forgotMessage = string.Empty;
                    model.forgotMessage = "<div class=\"alert-panel\"><div class=\"alert alert-success\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                        "Your username and password have been sent to your e-mail account. If you do not receive the e-mail, please check your spam folder.</div></div>";
                }
            }
            else
            {
                model.forgotMessage = string.Empty;
                model.forgotMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                    "Please enter valid email address.</div></div>";
            }
            return View(model);
        }

        public ActionResult Logout()
        {
            //standard logout 
            _authenticationService.SignOut();
            SharedInfo _SharedInfo = new SharedInfo();


            #region Modify code to use SharedInfo class instead of cookie :By Rachna singh on 23/Sep/2013.
            // string _cookiePrefix = _config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com");
            //if ((Request.Cookies[_cookiePrefix + ".Validation"] != null && Request.Cookies[_cookiePrefix + ".Validation"].HasKeys))
            //{
            //    int UserId = _common.GetIntegerValue(Na.Core.Helpers.SecureNPASecurity.Encryption.DecryptText(_common.GetStringValue(Request.Cookies[_cookiePrefix + ".Validation"].Values["userid"], "")), 0);
            //    _userService.RemoveUserSession(UserId);
            //}
            if (_SharedInfo.LoggedInUserInfo.User.UserId > 0)
            {
                int UserId = _SharedInfo.LoggedInUserInfo.User.UserId;
                _userService.RemoveUserSession(UserId);
            }
            #endregion

            ExpireCookie();
            Session.Abandon();
            //  return RedirectToAction("Index", "Homev5");
            return Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl.ToString());
        }

        [ChildActionOnly]
        public ActionResult FacebookLogin()
        {
            var fbModel = new HeaderLinksModel();
            fbModel.hdnUserID = "0";
            fbModel.hdnOpenFBModal = "0";
            fbModel.hdnFBConnectedNeed = "0";
            fbModel.hdnIsClearCookie = "0";
            fbModel.hdnFbMergeRu = "0";
            return PartialView(fbModel);
        }
        #endregion

        #region Validation Methods
        private bool ValidateLogOn(LoginModel model)
        {
            bool modelState = true;
            if (String.IsNullOrWhiteSpace(model.UserName))
            {
                model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                    "You must specify a username.</div></div>"; modelState = false;
            }
            if (String.IsNullOrWhiteSpace(model.Password))
            {
                model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                    "You must specify a password.</div></div>"; modelState = false;
            }
            return modelState;
        }
        private bool ValidateResetLogOn(LoginModel model)
        {
            bool modelState = true;
            if (String.IsNullOrWhiteSpace(model.UserName))
            {
                model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                    "You must specify a username.</div></div>"; modelState = false;
            }
            if (String.IsNullOrWhiteSpace(model.Password))
            {
                model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                    "You must specify a password.</div></div>"; modelState = false;
            }
            return modelState;
        }
        private bool ValidateForgotPassword(LoginModel model)
        {
            bool modelState = true;
            if (String.IsNullOrWhiteSpace(model.EmailAddess))
            {
                model.forgotMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                    "Please enter valid email address.</div></div>"; modelState = false;
            }
            return modelState;
        }
        #endregion

        #region Forgot Password
        private bool fcnGetPassword(LoginModel model)
        {
            bool retval = false;
            try
            {
                var userInformation = _userService.GetUserByEmailAddress(model.EmailAddess.Trim());

                if (userInformation == null)
                    return retval;

                string strBodyContent = "";
                string strEmailText = "";
                string strEmailSubject = "";
                string strEmailHTML = "";

                var emailtype = _emailTypes.GetEmailTypesById(50);

                if (emailtype != null)
                {
                    strEmailText = emailtype.EmailText;
                    strEmailSubject = emailtype.EmailSubject;
                    strEmailHTML = emailtype.EmailHTML;
                }

                //Modified by Kanchan for Mad Mimi on 2nd September 2013
                strBodyContent = strEmailText;

                //strBodyContent = strBodyContent.Replace("[#customer name#]", userInformation.FirstName);
                //strBodyContent = strBodyContent.Replace("[#user name#]", userInformation.UserName);
                //strBodyContent = strBodyContent.Replace("[#password#]", userInformation.Password);
                //strBodyContent = strBodyContent.Replace("[#renewal date#]", userInformation.NextBillingDate.ToString());

                strBodyContent = strBodyContent.Replace("<customer name>", userInformation.FirstName);
                strBodyContent = strBodyContent.Replace("<user name>", userInformation.UserName);
                strBodyContent = strBodyContent.Replace("<password>", userInformation.Password);

                ////Mail send through web service
                //defaultemailservice.Service mail = new defaultemailservice.Service();
                //mail.Timeout = 20000;
                //mail.SendHTMLEmail_WithoutHTMLTag(model.EmailAddess.Trim(), "", "customerservice@newspaperarchive.com", "NewspaperArchive", strEmailSubject, strBodyContent);
                madmimiwebservice.MadMimiWebService mimimail = new madmimiwebservice.MadMimiWebService();
                mimimail.Timeout = 30000;
                mimimail.SendMail_MadMimi_HTML_CustomizeFromDisplayNameEmailWithModifiedTemplete(model.EmailAddess.Trim(), strEmailSubject, "Test Customer mail sending panel", strBodyContent, false, "customerservice@newspaperarchive.com", "NewspaperArchive");
                retval = true;
            }
            catch (Exception Ex)
            {
                ErrorSignal.FromCurrentContext().Raise(Ex);
                retval = false;
            }
            return retval;
            //End modified by Kanchan for Mad Mimi on 2nd September 2013
        }
        #endregion

        #region Login Methods

        private void UpdateSharedLoggedInUserInfo(ValidateUserLogin validateUserLogin)
        {
            Na.Core.SharedInfo _sharedInfo = new Na.Core.SharedInfo();
            LoggedInUserInfo objLoggedInUserInfo = new LoggedInUserInfo();
            objLoggedInUserInfo.FBUser = validateUserLogin.FBUser;
            objLoggedInUserInfo.LoginUserMiscInfo = validateUserLogin.LoginUserMiscInfo;
            objLoggedInUserInfo.User = validateUserLogin.User;
            objLoggedInUserInfo.UserAccount = validateUserLogin.UserAccount;

            _sharedInfo.LoggedInUserInfo = objLoggedInUserInfo;


        }

        private bool fcnLogin(LoginModel model, ref User user, ref UserAccountInformation userAccountInfo, int LoginOrReset)
        {

            ValidateUserLogin objValidateUserLogin = null;    // main  class
            LoginUserMiscInfo objLoginUserMiscInfo = null;  // Login  validate information
            UserModel ObjUser = null;
            UserAccountModel ObjUserAccount = null;


            string strUsername = model.UserName;
            string strPassword = model.ResetPassword = model.Password;
            bool blnLogin = false;
            //added BY Rakesh Kumar on 13 June 2013 LoginUserData


            try
            {

                objValidateUserLogin = new ValidateUserLogin();    // main  class
                objLoginUserMiscInfo = new LoginUserMiscInfo();  // Login  validate information
                ObjUser = new UserModel();
                ObjUserAccount = new UserAccountModel();   // UserAccount  information 

                objValidateUserLogin = _loginService.ValidateUserLogin(model.UserName.Trim(), model.Password.Trim(), LoginOrReset, "http://www.newspaperarchive.com", Session.SessionID);////third parameter 0 is for Reset login .



                //if (objValidateUserLogin != null)
                if (objValidateUserLogin.User != null && objValidateUserLogin.FBUser != null && objValidateUserLogin.UserAccount != null && objValidateUserLogin.LoginUserMiscInfo != null)
                {
                    objLoginUserMiscInfo = objValidateUserLogin.LoginUserMiscInfo;
                    ObjUser = objValidateUserLogin.User;
                    ObjUserAccount = objValidateUserLogin.UserAccount;
                    if (ObjUser != null && objLoginUserMiscInfo != null && ObjUserAccount != null)
                        blnLogin = true;
                }

                if (blnLogin)
                {
                    int? LoggedInStatus = objLoginUserMiscInfo.UserIsLive;
                    //var CheckEncryptedLoginCookie = GetCookieValue(".ASPXAUTH"); //Added By Rakesh 
                    //if (LoggedInStatus > 0 && string.IsNullOrEmpty(CheckEncryptedLoginCookie))
                    if (LoggedInStatus > 0)
                    {
                        model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                                "<b>User already logged in at: " + String.Format("{0:MMM d  yyyy}", objLoginUserMiscInfo.LoginTime) +
                            ". Your account is showing you are logged in. More than one person can not be logged in under " +
                            "the same username. Please click on the \"Yes. Log me in and end the other session.\" button.</b></div></div>";
                        //////////"the same username. Please re-enter your user name and password then click on the reset button.</b></div></div>";

                        model.isConcurrent = true;
                        blnLogin = false;

                        return blnLogin;
                    }

                    HttpCookie cookies = new HttpCookie(_config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com") + ".shoppingCart");
                    cookies = Request.Cookies[_config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com") + ".shoppingCart"];
                    if (cookies != null)
                    {
                        cookies.Expires = DateTime.Now.AddDays(-1);
                        Response.Cookies.Add(cookies);
                    }

                    //userAccountInfo = _userAccountService.GetActiveAccountByUserId(user.UserId);

                    Na.Core.Cookies.clsCookies clsCookie = new Na.Core.Cookies.clsCookies();

                    if (objLoginUserMiscInfo == null)
                    {
                        blnLogin = false;
                    }
                    else
                    {
                        // var RoleId = 0;
                        if (objLoginUserMiscInfo.WebsiteID == 1 && objLoginUserMiscInfo.ActiveAccount == 1)
                        {
                            //roleId = Convert.ToInt32(objLoginInformatin.RoleId);
                            //var websiteRole = _webRoles.GetWebsiteRoleById(roleId);
                            String WebsiteRoleName = objLoginUserMiscInfo.WebsiteRoleName; // if Role Name exists then Proceed ahead else escape this conditions
                            if (!string.IsNullOrEmpty(WebsiteRoleName))
                            {
                                if (ObjUserAccount.EndDate < DateTime.Now)
                                {
                                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginUserMiscInfo.EmailAddress, ObjUser.FirstName, ObjUser.LastName, "7", "Expired", _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                                }
                                else
                                {
                                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginUserMiscInfo.EmailAddress, ObjUser.FirstName, ObjUser.LastName, ObjUserAccount.RoleId.ToString(), objLoginUserMiscInfo.WebsiteRoleName, _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                                }
                                // int? webSiteIdForURL = objLoginUserMiscInfo.WebSiteIdForReport;
                                //// below functionality is handled by Sproc--by Rakesh  Kumar on Dated 13 june 2013
                                //  _userService.ReportUserLogin(objLoginInformatin.UserID, "http://www.newspaperarchive.com", Session.SessionID);
                            }
                        }
                        else
                        {
                            //if (objLoginUserMiscInfo.ActiveAccount >= 0)
                            //{
                            //    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginUserMiscInfo.EmailAddress, ObjUser.FirstName, ObjUser.LastName, "7", "Expired", _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                            //    blnLogin = true;
                            //}
                            //else
                            //{
                            Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginUserMiscInfo.EmailAddress, ObjUser.FirstName, ObjUser.LastName, "7", "Expired", _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                            blnLogin = true;
                            //}
                        }
                    }
                }
                else
                {
                    blnLogin = false;
                    Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/login?value=invalid");
                }

                if (blnLogin)
                {
                    Session["testUSer"] = model.UserName;
                    UpdateSharedLoggedInUserInfo(objValidateUserLogin);
                }
            }
            //catch (Exception) { }
            finally
            {
                objLoginUserMiscInfo = null;
                ObjUser = null;
                ObjUserAccount = null;
                objValidateUserLogin = null;
            }
            return blnLogin;
        }
        /*  // below is commented BY Rakesh Kumar on 21 June 2013 
        private bool fcnLoginReset(LoginModel model, ref User user, ref UserAccountInformation userAccountInfo)
         {
            string strUsername = model.UserName;
            string strPassword = model.ResetPassword = model.Password;
            bool blnLogin = false;
            ////added By Rakesh Kumar on 13 June 2013
            ValidateUserLogin objLoginUserData = new ValidateUserLogin();    // main  class
            LoginUserMiscInfo objLoginInformation = new LoginUserMiscInfo();  // Login  validate information
            Core.Domain.Users.User ObjUser = new Core.Domain.Users.User();   // User information  
            // Core.Domain.Users.FBUser ObjFBUser = new Core.Domain.Users.FBUser();  // FB user Information 
            Core.Domain.Users.UserAccount ObjUserAccount = new Core.Domain.Users.UserAccount();   // UserAccount  information 
            try
            {
                objLoginUserData = _loginService.ValidateUserLogin(model.UserName.Trim(), model.Password.Trim(), 1, "http://www.newspaperarchive.com", Session.SessionID);  //third parameter 1 is for Reset login .
                objLoginInformation = objLoginUserData.LoginUserMiscInfo;
                ObjUser = objLoginUserData.User;
                ObjUserAccount = objLoginUserData.UserAccount;
                ////end of code
                // user = _userService.GetUserByUsername(model.UserName.Trim(), model.Password.Trim());
                // if (user != null) { blnLogin = true; }
                if (objLoginInformation != null) { blnLogin = true; }

                if (blnLogin)
                {
                    //_userService.RemoveUserSession(user.UserId);   // This will be handeled in the sp onm the basis of third parameter  in above function i.e LoginOrResetLogin
                    //var activeUser = new ActiveUserSession();
                    //activeUser = _userService.IsUserPresent(user.UserId);
                    int? LoggedInStatus = objLoginInformation.UserIsLive;
                    if (LoggedInStatus > 0)
                    {
                        model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
                                "<b>User already logged in at: " + String.Format("{0:MMM d  yyyy}", objLoginInformation.LoginTime) +
                            ". Your account is showing you are logged in. More than one person can not be logged in under" +
                            "the same username. Please re-enter your user name and password then click on the reset button.</b></div></div>";

                        model.isConcurrent = true;
                        blnLogin = false;
                        return blnLogin;
                    }
                    //else
                    //{
                    //    _userService.AddActiveUserSession(objLoginInformatin.UserID);  // this is handled in Sp 
                    //}

                    //userAccountInfo = _userAccountService.GetActiveAccountByUserId(objLoginInformatin.UserID); // this is handled in Sp 

                    Na.Core.Cookies.clsCookies clsCookie = new Na.Core.Cookies.clsCookies();

                    if (objLoginInformation == null)
                    {
                        blnLogin = false;
                    }
                    else
                    {
                        //var roleId = 0;
                        if (objLoginInformation.WebsiteID == 1 && objLoginInformation.ActiveAccount == 1)
                        {
                            // roleId = Convert.ToInt32(userAccountInfo.RoleId);
                            //var websiteRole = _webRoles.GetWebsiteRoleById(roleId);
                            String WebsiteRoleName = objLoginInformation.WebsiteRoleName; // if Role Name exists then Proceed ahead else escape this conditions
                            if (!string.IsNullOrEmpty(WebsiteRoleName))
                            {
                                if (ObjUserAccount.EndDate < DateTime.Now)
                                {
                                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginInformation.EmailAddress, ObjUser.FirstName, ObjUser.LastName, "7", "Expired", _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                                }
                                else
                                {
                                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginInformation.EmailAddress, ObjUser.FirstName, ObjUser.LastName, ObjUserAccount.RoleId.ToString(), objLoginInformation.WebsiteRoleName, _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                                }
                                //_userService.ReportUserLogin(objLoginInformatin.UserID, "http://www.newspaperarchive.com", Session.SessionID); // handeled in sp 
                            }
                        }
                        else
                        {
                            if (objLoginInformation.ActiveAccount >= 0)
                            {
                                Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginInformation.EmailAddress, ObjUser.FirstName, ObjUser.LastName, "7", "Expired", _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                                blnLogin = true;
                            }
                            else
                            {
                                Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(ObjUser.UserName), objLoginInformation.EmailAddress, ObjUser.FirstName, ObjUser.LastName, "7", "Expired", _common.GetStringValue(ObjUserAccount.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
                                blnLogin = true;
                            }
                            //_userService.ReportUserLogin(objLoginInformatin.UserID, "http://www.newspaperarchive.com", Session.SessionID);
                        }
                    }
                }
                else
                {
                    blnLogin = false;
                    Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/login?value=invalid");
                }

                if(blnLogin)
                    UpdateSharedLoggedInUserInfo(objLoginUserData);
            }
            catch (Exception)
            { }
            finally
            {
                objLoginInformation = null;
                ObjUser = null;
                ObjUserAccount = null;
                objLoginUserData = null;
            }
            return blnLogin;
        }
        */

        //private bool fcnLogin(LoginModel model, ref User user, ref UserAccountInformation userAccountInfo)
        //{
        //    string strUsername = model.UserName;
        //    string strPassword = model.ResetPassword = model.Password;
        //    bool blnLogin = false;

        //    user = _userService.GetUserByUsername(model.UserName.Trim(), model.Password.Trim());
        //    if (user != null)
        //    {
        //        blnLogin = true;
        //    }

        //    if (blnLogin)
        //    {
        //        var activeUser = new ActiveUserSession();
        //        activeUser = _userService.IsUserPresent(user.UserId);
        //        if (activeUser != null)
        //        {
        //            model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
        //                    "<b>User already logged in at: " + String.Format("{0:MMM d  yyyy}", activeUser.LoginTime) +
        //                ". Your account is showing you are logged in. More than one person can not be logged in under " +
        //                "the same username. Please click on the \"Yes. Log me in and end the other session.\" button.</b></div></div>";
        //                //////////"the same username. Please re-enter your user name and password then click on the reset button.</b></div></div>";

        //            model.isConcurrent = true;
        //            blnLogin = false;

        //            return blnLogin;
        //        }
        //        else
        //        {
        //            _userService.AddActiveUserSession(user.UserId);
        //        }

        //        HttpCookie cookies = new HttpCookie(_config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com") + ".shoppingCart");
        //        cookies = Request.Cookies[_config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com") + ".shoppingCart"];
        //        if (cookies != null)
        //        {
        //            cookies.Expires = DateTime.Now.AddDays(-1);
        //            Response.Cookies.Add(cookies);
        //        }

        //        userAccountInfo = _userAccountService.GetActiveAccountByUserId(user.UserId);

        //        Na.Core.Cookies.clsCookies clsCookie = new Na.Core.Cookies.clsCookies();

        //        if (userAccountInfo == null)
        //        {
        //            blnLogin = false;
        //        }
        //        else
        //        {
        //            var roleId = 0;
        //            if (userAccountInfo.WebsiteID == 1 && userAccountInfo.ActiveAccount == 1)
        //            {
        //                roleId = Convert.ToInt32(userAccountInfo.RoleId);
        //                var websiteRole = _webRoles.GetWebsiteRoleById(roleId);
        //                if (websiteRole != null)
        //                {
        //                    if (userAccountInfo.EndDate < DateTime.Now)
        //                    {
        //                        Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, "7", "Expired", _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    }
        //                    else
        //                    {
        //                        Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, websiteRole.RoleId.ToString(), websiteRole.WebsiteRoleName, _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    }
        //                    _userService.ReportUserLogin(user.UserId, "http://www.newspaperarchive.com", Session.SessionID);
        //                }
        //            }
        //            else
        //            {
        //                if (userAccountInfo.ActiveAccount >= 0)
        //                {
        //                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, "7", "Expired", _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    blnLogin = true;
        //                }
        //                else
        //                {
        //                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, "7", "Expired", _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    blnLogin = true;
        //                }
        //            }
        //        }
        //    }
        //    else
        //    {
        //        blnLogin = false;
        //        Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/login?value=invalid");
        //    }
        //    return blnLogin;
        //}
        //private bool fcnLoginReset(LoginModel model, ref User user, ref UserAccountInformation userAccountInfo)
        //{
        //    string strUsername = model.UserName;
        //    string strPassword = model.ResetPassword = model.Password;
        //    bool blnLogin = false;

        //    user = _userService.GetUserByUsername(model.UserName.Trim(), model.Password.Trim());
        //    if (user != null) { blnLogin = true; }

        //    if (blnLogin)
        //    {
        //        _userService.RemoveUserSession(user.UserId);
        //        var activeUser = new ActiveUserSession();
        //        activeUser = _userService.IsUserPresent(user.UserId);
        //        if (activeUser != null)
        //        {
        //            model.loginMessage = "<div class=\"alert-panel\"><div class=\"alert alert-error\"><button data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button>" +
        //                    "<b>User already logged in at: " + String.Format("{0:MMM d  yyyy}", activeUser.LoginTime) +
        //                ". Your account is showing you are logged in. More than one person can not be logged in under" +
        //                "the same username. Please re-enter your user name and password then click on the reset button.</b></div></div>";

        //            model.isConcurrent = true;
        //            blnLogin = false;
        //            return blnLogin;
        //        }
        //        else
        //        {
        //            _userService.AddActiveUserSession(user.UserId);
        //        }

        //        userAccountInfo = _userAccountService.GetActiveAccountByUserId(user.UserId);

        //        Na.Core.Cookies.clsCookies clsCookie = new Na.Core.Cookies.clsCookies();

        //        if (userAccountInfo == null)
        //        {
        //            blnLogin = false;
        //        }
        //        else
        //        {
        //            var roleId = 0;
        //            if (userAccountInfo.WebsiteID == 1 && userAccountInfo.ActiveAccount == 1)
        //            {
        //                roleId = Convert.ToInt32(userAccountInfo.RoleId);
        //                var websiteRole = _webRoles.GetWebsiteRoleById(roleId);
        //                if (websiteRole != null)
        //                {
        //                    if (userAccountInfo.EndDate < DateTime.Now)
        //                    {
        //                        Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, "7", "Expired", _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    }
        //                    else
        //                    {
        //                        Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, websiteRole.RoleId.ToString(), websiteRole.WebsiteRoleName, _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    }
        //                    _userService.ReportUserLogin(user.UserId, "http://www.newspaperarchive.com", Session.SessionID);
        //                }
        //            }
        //            else
        //            {
        //                if (userAccountInfo.ActiveAccount >= 0)
        //                {
        //                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, "7", "Expired", _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    blnLogin = true;
        //                }
        //                else
        //                {
        //                    Response.Cookies.Add(clsCookie.fcnCreateValidationCookie(Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserId.ToString()), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.Password), Na.Core.Helpers.SecureNPASecurity.Encryption.EncryptText(user.UserName), user.EmailAddress, user.FirstName, user.LastName, "7", "Expired", _common.GetStringValue(userAccountInfo.PlanId, string.Empty), "", ConfigurationManager.AppSettings["cookieTimeout"].ToString(), ConfigurationManager.AppSettings["cookiePrefix"].ToString()));
        //                    blnLogin = true;
        //                }
        //                _userService.ReportUserLogin(user.UserId, "http://www.newspaperarchive.com", Session.SessionID);
        //            }
        //        }
        //    }
        //    else
        //    {
        //        blnLogin = false;
        //        Redirect(Na.Core.Configuration.NaConfig.Url.DomainUrl + "/login?value=invalid");
        //    }
        //    return blnLogin;
        //}

        #endregion

        #region ExpireCookie method
        public void ExpireCookie()
        {
            // 4/16/2009 jao - TODO: can we grab something here (the cookie itself) and reuse instead of grabbing / string replacements each time
            var CookiePrefix = ConfigurationManager.AppSettings["cookiePrefix"].ToString();
            string validationCookieName = CookiePrefix + ".Validation";
            if (Request.Cookies[validationCookieName] != null)
            {
                Request.Cookies[validationCookieName].Value = null;
                Request.Cookies[validationCookieName].Expires = DateTime.MinValue;
                Request.Cookies[validationCookieName].Path = "/";
            }

            if (Response.Cookies[validationCookieName] != null)
            {
                Response.Cookies[validationCookieName].Value = null;
                Response.Cookies[validationCookieName].Expires = DateTime.MinValue;
                Response.Cookies[validationCookieName].Path = "/";
            }

            string contentAreasCookieName = CookiePrefix + ".ContentAreas";
            if (Request.Cookies[contentAreasCookieName] != null)
            {
                Request.Cookies[contentAreasCookieName].Value = null;
                Request.Cookies[contentAreasCookieName].Expires = DateTime.MinValue;
                Request.Cookies[contentAreasCookieName].Path = "/";
            }
            if (Response.Cookies[contentAreasCookieName] != null)
            {
                Response.Cookies[contentAreasCookieName].Value = null;
                Response.Cookies[contentAreasCookieName].Expires = DateTime.MinValue;
                Response.Cookies[contentAreasCookieName].Path = "/";
            }

            string websiteCookieName = "http://newspaperarchive.com".Replace("http://", String.Empty).Replace("www", String.Empty);
            if (Request.Cookies[websiteCookieName] != null)
            {
                Request.Cookies[websiteCookieName].Value = null;
                Request.Cookies[websiteCookieName].Expires = DateTime.MinValue;
                Request.Cookies[websiteCookieName].Path = "/";
            }
            if (Response.Cookies[websiteCookieName] != null)
            {
                Response.Cookies[websiteCookieName].Value = null;
                Response.Cookies[websiteCookieName].Expires = DateTime.MinValue;
                Response.Cookies[websiteCookieName].Path = "/";
            }

            // cleanup           
            validationCookieName = null;
        }
        #endregion

        #region Redirect After Login
        private string fcnRedirectedPage()
        {
            var url = string.Empty;
            if ((Request.Cookies[_config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com") + ".SearchValues"] != null && Request.Cookies[_config.GetStringValueFromConfig("cookiePrefix", "NewspaperARCHIVE.com") + ".SearchValues"].HasKeys))
            {
                var _searchResModel = new SearchResultsModel();
                var helper = new SearchHelper(_savedSearchService, _common);
                _searchResModel = helper.GetModelSearchValuesCookie(_searchResModel);
                url = helper.getURLfromSearchValues(_searchResModel, "", 0);
            }
            return url;
        }
        private bool isRedirectControllPageAfterLogin(string PageLists, string CurrentPage)
        {
            bool isMember = false;
            string _currPage = string.Empty;
            if (!String.IsNullOrWhiteSpace(_common.GetStringValue(CurrentPage, string.Empty)))
            {
                if (_common.GetStringValue(CurrentPage, string.Empty).IndexOf("/") > 0)
                {
                    string[] fmCurrentPage = _common.GetStringValue(PageLists, string.Empty).Split('/');
                    if (fmCurrentPage.GetUpperBound(0) > 0)
                    {
                        _currPage = fmCurrentPage[0].ToLower();
                    }
                }
                else
                {
                    _currPage = _common.GetStringValue(CurrentPage, string.Empty).ToLower();
                }
            }

            if (!String.IsNullOrWhiteSpace(_common.GetStringValue(PageLists, string.Empty)) && !String.IsNullOrWhiteSpace(_common.GetStringValue(_currPage, string.Empty)))
            {
                if (_common.GetStringValue(PageLists, string.Empty).IndexOf(",") > 0)
                {
                    string[] fmPageLists = _common.GetStringValue(PageLists, string.Empty).Split(',');
                    if (fmPageLists.GetUpperBound(0) > 0)
                    {
                        foreach (string fmPageList in fmPageLists)
                        {
                            if (fmPageList == _currPage) { isMember = true; break; }
                        }
                    }
                }
                else
                {
                    if (PageLists == _currPage) { isMember = true; }
                }
            }
            return isMember;
        }
        #endregion

        #region Remember Me Functionality
        /// <summary>
        /// Created By Rakesh  On  15 July 2013 to implement the  functionality of  Remember  Me.
        /// </summary>
        /// <param name="CookieKey"></param>
        /// <returns></returns>
        public string GetCookieValue(string CookieKey)
        {
            string value = "";
            HttpCookie Cookie = new HttpCookie(CookieKey);
            Cookie = Request.Cookies[CookieKey];
            if (Cookie != null)
            {
                value = Cookie.Value;
            }

            return value;
        }


        /// <summary>
        /// /// Created By Rakesh  On  15 July 2013 to implement the  functionality of  Remember  Me.
        /// </summary>
        /// <param name="jsonInputStream"> Get the value from JSON </param>
        /// <param name="model"> Add the JSON values to Model </param>
        public void GetCookeValuesForNextLogin(string jsonInputStream, LoginModel model)
        {
            var jss = new JavaScriptSerializer();
            // string json = new StreamReader(inputStream).ReadToEnd();
            Dictionary<string, string> sData = jss.Deserialize<Dictionary<string, string>>(jsonInputStream);
            string _UserName = Convert.ToString(sData["UserName"]);
            string _Password = Convert.ToString(sData["Password"]);
            //string _UserName = Convert.ToString(sData["UserName"]);
            //string _Password = Convert.ToString("password");
            model.UserName = _UserName;
            model.Password = _Password;
            model.RememberMe = true;
        }

        #endregion
    }
}
